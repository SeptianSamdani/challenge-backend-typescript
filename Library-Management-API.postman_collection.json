{
	"info": {
		"_postman_id": "library-management-api-002",
		"name": "Library Management API - Fixed",
		"description": "Complete REST API with automated unique data generation",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Register User",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate unique username with timestamp",
									"const timestamp = Date.now();",
									"const randomNum = Math.floor(Math.random() * 1000);",
									"const username = `testuser_${timestamp}_${randomNum}`;",
									"",
									"pm.environment.set('test_username', username);",
									"pm.environment.set('test_password', 'password123');",
									"",
									"console.log('Generated username:', username);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Response has user data', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('username');",
									"    pm.expect(jsonData).to.have.property('message');",
									"    ",
									"    console.log('User registered with ID:', jsonData.id);",
									"});",
									"",
									"pm.test('Password not in response', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.not.have.property('password');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"{{test_username}}\",\n  \"password\": \"{{test_password}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/register",
							"host": ["{{base_url}}"],
							"path": ["auth", "register"]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Response has access token', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('access_token');",
									"    ",
									"    // Save token to environment",
									"    pm.environment.set('jwt_token', jsonData.access_token);",
									"    console.log('Token saved successfully');",
									"});",
									"",
									"pm.test('Token is JWT format', function () {",
									"    const jsonData = pm.response.json();",
									"    const token = jsonData.access_token;",
									"    const parts = token.split('.');",
									"    pm.expect(parts.length).to.eql(3);",
									"});",
									"",
									"pm.test('Response time is acceptable', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"{{test_username}}\",\n  \"password\": \"{{test_password}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/login",
							"host": ["{{base_url}}"],
							"path": ["auth", "login"]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Books",
			"item": [
				{
					"name": "Create Book - Clean Code",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate unique ISBN",
									"const isbn = '978' + Date.now().toString().slice(-10);",
									"pm.environment.set('isbn_1', isbn);",
									"console.log('Generated ISBN:', isbn);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Book created with correct data', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('title');",
									"    pm.expect(jsonData).to.have.property('author');",
									"    pm.expect(jsonData.title).to.include('Clean Code');",
									"    ",
									"    // Save book ID",
									"    pm.environment.set('book_id_1', jsonData.id);",
									"    console.log('Book 1 ID:', jsonData.id);",
									"});",
									"",
									"pm.test('Available copies is correct', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.available_copies).to.eql(5);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Clean Code\",\n  \"author\": \"Robert C. Martin\",\n  \"isbn\": \"{{isbn_1}}\",\n  \"published_year\": 2008,\n  \"available_copies\": 5\n}"
						},
						"url": {
							"raw": "{{base_url}}/books",
							"host": ["{{base_url}}"],
							"path": ["books"]
						}
					},
					"response": []
				},
				{
					"name": "Create Book - Pragmatic Programmer",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate unique ISBN",
									"const isbn = '978' + (Date.now() + 1).toString().slice(-10);",
									"pm.environment.set('isbn_2', isbn);",
									"console.log('Generated ISBN:', isbn);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Book created successfully', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.environment.set('book_id_2', jsonData.id);",
									"    console.log('Book 2 ID:', jsonData.id);",
									"});",
									"",
									"pm.test('Book has correct structure', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('title');",
									"    pm.expect(jsonData).to.have.property('author');",
									"    pm.expect(jsonData).to.have.property('isbn');",
									"    pm.expect(jsonData).to.have.property('available_copies');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"The Pragmatic Programmer\",\n  \"author\": \"Andrew Hunt, David Thomas\",\n  \"isbn\": \"{{isbn_2}}\",\n  \"published_year\": 1999,\n  \"available_copies\": 3\n}"
						},
						"url": {
							"raw": "{{base_url}}/books",
							"host": ["{{base_url}}"],
							"path": ["books"]
						}
					},
					"response": []
				},
				{
					"name": "Get All Books",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response is array', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"});",
									"",
									"pm.test('Array contains our books', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.be.at.least(2);",
									"});",
									"",
									"pm.test('Books have required fields', function () {",
									"    const jsonData = pm.response.json();",
									"    if (jsonData.length > 0) {",
									"        const book = jsonData[0];",
									"        pm.expect(book).to.have.property('id');",
									"        pm.expect(book).to.have.property('title');",
									"        pm.expect(book).to.have.property('author');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/books",
							"host": ["{{base_url}}"],
							"path": ["books"]
						}
					},
					"response": []
				},
				{
					"name": "Get Book by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Book has required fields', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('title');",
									"    pm.expect(jsonData).to.have.property('author');",
									"    pm.expect(jsonData).to.have.property('isbn');",
									"});",
									"",
									"pm.test('Book ID matches request', function () {",
									"    const jsonData = pm.response.json();",
									"    const requestedId = parseInt(pm.environment.get('book_id_1'));",
									"    pm.expect(jsonData.id).to.eql(requestedId);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/books/{{book_id_1}}",
							"host": ["{{base_url}}"],
							"path": ["books", "{{book_id_1}}"]
						}
					},
					"response": []
				},
				{
					"name": "Update Book",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Book updated successfully', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.title).to.include('Updated');",
									"    pm.expect(jsonData.available_copies).to.eql(10);",
									"});",
									"",
									"pm.test('Other fields unchanged', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.author).to.eql('Robert C. Martin');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Clean Code - Updated Edition\",\n  \"available_copies\": 10\n}"
						},
						"url": {
							"raw": "{{base_url}}/books/{{book_id_1}}",
							"host": ["{{base_url}}"],
							"path": ["books", "{{book_id_1}}"]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Borrowings",
			"item": [
				{
					"name": "Borrow a Book",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Set dates",
									"const today = new Date().toISOString().split('T')[0];",
									"const futureDate = new Date();",
									"futureDate.setDate(futureDate.getDate() + 14);",
									"const returnDate = futureDate.toISOString().split('T')[0];",
									"",
									"pm.environment.set('borrow_date', today);",
									"pm.environment.set('return_date', returnDate);",
									"",
									"console.log('Borrow date:', today);",
									"console.log('Return date:', returnDate);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Borrowing created successfully', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData.returned).to.eql(0);",
									"    ",
									"    pm.environment.set('borrowing_id', jsonData.id);",
									"    console.log('Borrowing ID:', jsonData.id);",
									"});",
									"",
									"pm.test('Borrowing has correct book_id', function () {",
									"    const jsonData = pm.response.json();",
									"    const bookId = parseInt(pm.environment.get('book_id_2'));",
									"    pm.expect(jsonData.book_id).to.eql(bookId);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"book_id\": {{book_id_2}},\n  \"borrower_name\": \"John Doe\",\n  \"borrow_date\": \"{{borrow_date}}\",\n  \"return_date\": \"{{return_date}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/borrowings",
							"host": ["{{base_url}}"],
							"path": ["borrowings"]
						}
					},
					"response": []
				},
				{
					"name": "Get All Borrowings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response is array', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"});",
									"",
									"pm.test('Borrowings have required fields', function () {",
									"    const jsonData = pm.response.json();",
									"    if (jsonData.length > 0) {",
									"        const borrowing = jsonData[0];",
									"        pm.expect(borrowing).to.have.property('id');",
									"        pm.expect(borrowing).to.have.property('book_id');",
									"        pm.expect(borrowing).to.have.property('borrower_name');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/borrowings",
							"host": ["{{base_url}}"],
							"path": ["borrowings"]
						}
					},
					"response": []
				},
				{
					"name": "Get Borrowing by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Borrowing has required fields', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('book_id');",
									"    pm.expect(jsonData).to.have.property('borrower_name');",
									"    pm.expect(jsonData).to.have.property('returned');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/borrowings/{{borrowing_id}}",
							"host": ["{{base_url}}"],
							"path": ["borrowings", "{{borrowing_id}}"]
						}
					},
					"response": []
				},
				{
					"name": "Return a Book",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Book returned successfully', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.returned).to.eql(1);",
									"});",
									"",
									"pm.test('Borrowing ID matches', function () {",
									"    const jsonData = pm.response.json();",
									"    const borrowingId = parseInt(pm.environment.get('borrowing_id'));",
									"    pm.expect(jsonData.id).to.eql(borrowingId);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{base_url}}/borrowings/{{borrowing_id}}/return",
							"host": ["{{base_url}}"],
							"path": ["borrowings", "{{borrowing_id}}", "return"]
						}
					},
					"response": []
				},
				{
					"name": "Delete Borrowing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Success message present', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/borrowings/{{borrowing_id}}",
							"host": ["{{base_url}}"],
							"path": ["borrowings", "{{borrowing_id}}"]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Error Cases",
			"item": [
				{
					"name": "Access Without Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 401', function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test('Error response structure', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('statusCode');",
									"    pm.expect(jsonData).to.have.property('message');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/books",
							"host": ["{{base_url}}"],
							"path": ["books"]
						}
					},
					"response": []
				},
				{
					"name": "Borrow Non-Existent Book",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 404', function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test('Error message present', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData.message).to.include('not found');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"book_id\": 99999,\n  \"borrower_name\": \"Jane Doe\",\n  \"borrow_date\": \"2025-01-15\",\n  \"return_date\": \"2025-01-29\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/borrowings",
							"host": ["{{base_url}}"],
							"path": ["borrowings"]
						}
					},
					"response": []
				}
			]
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:3000",
			"type": "string"
		}
	]
}